<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cap定理</title>
    <url>/2019/04/20/cap%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>它指出对于一个<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97">分布式计算系统</a>来说，不可能同时满足以下三点：</p>
<ul>
<li>一致性（<strong>C</strong>onsistency） （等同于所有节点访问同一份最新的数据副本）</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%94%A8%E6%80%A7">可用性</a>（<strong>A</strong>vailability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）</li>
<li><a href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E5%88%86%E5%8C%BA&action=edit&redlink=1">分区容错性</a>（<strong>P</strong>artition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择[<a href="https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-3">3]</a>。）</li>
</ul>
<p>根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项[<a href="https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86#cite_note-4">4]</a>。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。<span id="more"></span></p>
<p>也就是说，在分布式系统中P一定存在的，因为种种原因，肯定会出现节点之间网络不互通的情况【比如某个分区断网，断电】。所以要在P的情况下载一致性和可用性之间做出选择。</p>
<p>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。</p>
<p>​            当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。如果要容忍，那么就会出现数据不一致性，因为网络之间不互通无法做到所有节点数据都更新。</p>
<p>​       提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。</p>
<p>​         然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。这个时候回锁住分区的服务器知道他们都更新成功，才能对外提供服务，所以降低了可用性。</p>
<p>​     总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。</p>
<p>例子：</p>
<p>​      让我们考虑一个非常简单的分布式系统。我们的系统由两个服务器$ G_1 $和$ G_2 组成。这两个服务器都跟踪相同的变量$ v $，其初始值为$ v_0 。$ G_1 $和$ G_2 $可以彼此通信，也可以与外部客户端通信。这是我们的系统的外观。</p>
<p>​    <img src="/images/7492.png" alt="0"></p>
<p>客户端可以请求从任何服务器进行写入和读取。服务器收到请求后，将执行所需的任何计算，然后响应客户端。例如，这是写的样子。</p>
<p>​    <img src="/images/7495.png" alt="0"></p>
<p>一致性：</p>
<p>​     在写操作完成之后开始的任何读操作必须返回该值，或者以后的写操作的结果</p>
<p>在一致的系统中，客户端将值写入任何服务器并获得响应后，它期望从其读取的任何服务器取回该值（或更新鲜的值）。</p>
<p>这是一个<strong>不一致的</strong>系统的示例。【此时G1服务器和G2服务未同步完成数据更新】</p>
<p>​    <img src="/images/7500.png" alt="0"></p>
<p>我们的客户将$ v_1 $写入$ G_1 $并且$ G_1 $确认，但是当它从$ G_2 $读取时，它会得到陈旧的数据：$ v_0 $。</p>
<p>另一方面，这是一个<strong>一致的</strong> 系统的示例。</p>
<p>​    <img src="/images/7504.png" alt="0"></p>
<p>在此系统中，$ G_1 $将其值复制到$ G_2 $，然后再向客户端发送确认。因此，当客户端从$ G_2 $中读取时，它将获得$ v $的最新值：$ v_1 $。</p>
<p>可用性：</p>
<p>​        系统中非故障节点收到的每个请求都必须导致响应</p>
<p>在可用的系统中，如果我们的客户端向服务器发送请求并且服务器没有崩溃，则服务器最终必须响应客户端。不允许服务器忽略客户端的请求。如上边的不一致性，提高了可用性，但是会造成数据不一致性。</p>
<p><strong>分区容差</strong>：</p>
<p>​    网络将被允许任意丢失从一个节点发送到另一节点的许多消息</p>
<p>这意味着可以丢弃任何彼此发送的消息$ G_1 $和$ G_2 $。如果所有消息都被丢弃，那么我们的系统将如下所示。</p>
<p>​    <img src="/images/7513.png" alt="0"></p>
<p>为了容忍分区，我们的系统必须能够在任意网络分区下正常运行。</p>
<p>此时，我们要在C和A之间做一个选择，如果选择C，那么节点之间会一致等待节点之间的互通或数据同步完成，期间会造成服务可用性降低【对客户端请求挂起等等】；如果选择A那么，节点之间会出现数据不一致性。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>cap</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>avl平衡树</title>
    <url>/2021/04/20/avl%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<p>avl树是自带有平衡条件的二叉树，平常的二叉树在插入数据的很可能造成树的左子树或者右子树过长。造成查询是线性。avl要保持树的深度是logN。最简单的想法是要求左右紫薯具有相同的高度。一颗avl树是其每个节点的左子树和右子树的高度最多差1的二叉查找树。<br><img src="/images/img/08-09/f27877b4-157b-40d1-976a-b8be7e8d586f.png"><br>当我们插入的时候必须保证avl树的特性，即是左右子树的高度差最多是1，分析插入的特性我们发现有以下四种情况<span id="more"></span></p>
<p>当我们插入的时候必须保证avl树的特性，即是左右子树的高度差最多是1，分析插入的特性我们发现有以下四种情况：</p>
<p>基于二叉树的定义可以发现，发生不满足的【不平衡的时候】存在以下四种情况</p>
<ul>
<li><p>1.当前节点的左子树的左子树在进行一次插入。熟称LL。</p>
</li>
<li><p>2.当前节点的左子树的右子树在进行一次插入。熟称LR。</p>
</li>
<li><p>3.当前节点的右子树的右子树在进行一次插入。熟称RR。</p>
</li>
<li><p>4.当前节点的右子树的左子树在进行一次插入。熟称RL</p>
</li>
</ul>
<p>操作avl时候一些特性:</p>
<p>当我们定义节点的时候，每个节点保存自己的高度因子：高度因子：空节点 是 -1，因子只能在 0，-1，1之间取值。新插入的节点默认高度因子是0;计算高度因子：节点的高度因子 = max(左子树的高度因子 , 右子树的高度因子) 加 1.当一个节点新插入子节点后需要重新 计算该节点的高度因子，用来检查是否符合平衡条件在失去平衡的时候，可以看出 1，4是镜像问题，2，3是镜像问题.</p>
<p>下图是LL失去平衡的例子:</p>
<p><img src="/images/img/08-09/71034a2b-0cea-41fb-b768-0ec9d848185e.png"></p>
<p>此时我们需要作出反转:</p>
<p><img src="/images/img/08-09/0f7fcac1-94d6-401c-85ad-696b4a6e8a2e.png"></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public function leftSigon(Node node) &#123;          $k1 &#x3D; node-&gt;left;&#x2F;&#x2F;也即是 4 节点             $node-&gt;left &#x3D; $k1-&gt;right;&#x2F;&#x2F;</span><br><span class="line">             $k1-&gt;right  &#x3D; $node;&#x2F;&#x2F;4节点的右子树为</span><br><span class="line">             $node-&gt;height &#x3D; max($this-&gt;getHeight($node-&gt;left),$this-&gt;getHeight($node-&gt;right)) + 1;&#x2F;&#x2F;重新计算右子树的高度</span><br><span class="line">             $k1-&gt;height &#x3D; max($this-&gt;getHeight($k1-&gt;left),$this-&gt;getHeight($k1-&gt;right)) + 1;&#x2F;&#x2F;重新计算高度因子</span><br><span class="line">&#x2F;&#x2F;因为4节点的左子树没动所以不用重新计算高度</span><br><span class="line">             return $k1;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p>当出现RR插入的时候，也就是 右右插入的时候其实和LL的镜像问题:</p>
<p><img src="/images/img/08-09/cb279e31-419d-460f-a609-154c9e041094.png"></p>
<p>所以RR的代码是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public function rightSigon(Node node) &#123;</span><br><span class="line">             $k1 &#x3D; node-&gt;right                ;&#x2F;&#x2F;也即是 8 节点</span><br><span class="line">             $node-&gt;right &#x3D; $k1-&gt;left;&#x2F;&#x2F;父节点的右节点为子节点的做节点【二叉树定义可知 右子树大于父节点，所以右子树下的左节点作为父节点的右子树】</span><br><span class="line">             $k1-&gt;left  &#x3D; $node;&#x2F;&#x2F;右子树的做节点为父节点，转换完毕</span><br><span class="line">             &#x2F;&#x2F;重新计算 高度因子值</span><br><span class="line">             $node-&gt;height &#x3D; max($this-&gt;getHeight($node-&gt;left),$this-&gt;getHeight($node-&gt;right)) + 1;</span><br><span class="line">             $k1-&gt;height &#x3D; max($this-&gt;getHeight($k1-&gt;left),$this-&gt;getHeight($k1-&gt;right)) + 1;</span><br><span class="line">             return $k1;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p>当出现RL的时候：</p>
<p><img src="/images/img/08-09/ba9a5b91-f5bb-410c-b67a-d118ab2a7819.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RL代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">RLSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>-&gt;right); <span class="comment">//LL情况下旋转</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>);<span class="comment">//RR情况下旋转</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>LR是和RL镜像问题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">LRSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="variable">$node</span>-&gt;left = <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>-&gt;left);<span class="comment">//先处理RR情况</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>);<span class="comment">//在处理LL情况</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>删除分析：当删除的元素只有右子树或者左子树，且右子树或左子树是叶子节点，也就是说右子树，左子树他们没有相应的子树时候就会失去平衡。</p>
<p><img src="/images/img/08-09/a2da191c-3896-4881-85a2-0f95ea8ebc94.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delRecursion</span>(<span class="params">Node <span class="variable">$node</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$value</span> &gt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">        <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;right, <span class="variable">$value</span>);</span><br><span class="line">        <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$value</span> &lt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">        <span class="variable">$node</span>-&gt;left = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;left, <span class="variable">$value</span>);</span><br><span class="line">        <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$node</span>-&gt;left &amp;&amp; <span class="variable">$node</span>-&gt;right) &#123;</span><br><span class="line">            <span class="variable">$tmp</span> = <span class="keyword">$this</span>-&gt;findMin(<span class="variable">$node</span>-&gt;right);</span><br><span class="line">            <span class="variable">$node</span>-&gt;value = <span class="variable">$tmp</span>-&gt;value;</span><br><span class="line">            <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;right, <span class="variable">$tmp</span>-&gt;value);</span><br><span class="line">            <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$node</span>-&gt;left || <span class="variable">$node</span>-&gt;right) &#123;</span><br><span class="line">            <span class="variable">$node</span> = <span class="variable">$node</span>-&gt;left ? <span class="variable">$node</span>-&gt;left : <span class="variable">$node</span>-&gt;right;</span><br><span class="line">            <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$node</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$node</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findMin</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$node</span>-&gt;left) &#123;</span><br><span class="line">        <span class="variable">$node</span> = <span class="variable">$node</span>-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$node</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: lhs</span></span><br><span class="line"><span class="comment"> * Date: 2019-07-05</span></span><br><span class="line"><span class="comment"> * Time: 13:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL平衡树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span> = <span class="literal">null</span>;<span class="comment">//值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$left</span> = <span class="literal">null</span>;<span class="comment">//左子结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$right</span> = <span class="literal">null</span>;<span class="comment">//右子结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$height</span> = <span class="number">0</span>;<span class="comment">//高度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;value = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class AvlTree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlTree</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空节点-1，如果是节点返回节点的高度。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHeight</span>(<span class="params"><span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$node</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$node</span>-&gt;height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leftSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Node $k1 ;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$k1</span>           = <span class="variable">$node</span>-&gt;left;<span class="comment">//也即是 4 节点</span></span><br><span class="line">        <span class="variable">$node</span>-&gt;left   = <span class="variable">$k1</span>-&gt;right;</span><br><span class="line">        <span class="variable">$k1</span>-&gt;right    = <span class="variable">$node</span>;</span><br><span class="line">        <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left), <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$k1</span>-&gt;height   = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$k1</span>-&gt;left), <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$k1</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$k1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rightSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Node $k1 ;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$k1</span>          = <span class="variable">$node</span>-&gt;right;<span class="comment">//也即是 8 节点</span></span><br><span class="line">        <span class="variable">$node</span>-&gt;right = <span class="variable">$k1</span>-&gt;left;<span class="comment">//父节点的右节点为子节点的做节点【二叉树定义可知 右子树大于父节点，所以右子树下的左节点作为父节点的右子树】</span></span><br><span class="line">        <span class="variable">$k1</span>-&gt;left    = <span class="variable">$node</span>;<span class="comment">//右子树的做节点为父节点，转换完毕</span></span><br><span class="line">        <span class="comment">//重新计算 高度因子值</span></span><br><span class="line">        <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left), <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="variable">$k1</span>-&gt;height   = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$k1</span>-&gt;left), <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$k1</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$k1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">LRSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$node</span>-&gt;left = <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">RLSigon</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$x</span>, <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$node</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$node</span>         = <span class="keyword">new</span> Node(<span class="variable">$x</span>);</span><br><span class="line">            <span class="variable">$node</span>-&gt;left   = <span class="variable">$node</span>-&gt;right = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable">$node</span>-&gt;height = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$x</span> &lt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">            <span class="variable">$node</span>-&gt;left = <span class="keyword">$this</span>-&gt;insert(<span class="variable">$x</span>, <span class="variable">$node</span>-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$x</span> &lt; <span class="variable">$node</span>-&gt;left-&gt;value) &#123;<span class="comment">//LL情况</span></span><br><span class="line">                    <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;LRSigon(<span class="variable">$node</span>);<span class="comment">//LR情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$x</span> &gt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">            <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;insert(<span class="variable">$x</span>, <span class="variable">$node</span>-&gt;right);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$x</span> &gt; <span class="variable">$node</span>-&gt;right-&gt;value) &#123;<span class="comment">//RR情况</span></span><br><span class="line">                    <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;RLSigon(<span class="variable">$node</span>);<span class="comment">//RL情况</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left), <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;<span class="comment">//重新计算高度因子</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$node</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $space</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printTree</span>(<span class="params"><span class="variable">$node</span>, <span class="variable">$space</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$node</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$space</span> . <span class="variable">$node</span>-&gt;value . <span class="string">&quot;[&quot;</span> . <span class="variable">$node</span>-&gt;height . <span class="string">&quot;]&quot;</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;printTree(<span class="variable">$node</span>-&gt;left, <span class="variable">$space</span> . <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;printTree(<span class="variable">$node</span>-&gt;right, <span class="variable">$space</span> . <span class="string">&quot;   &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delRecursion</span>(<span class="params">Node <span class="variable">$node</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$value</span> &gt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">            <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;right, <span class="variable">$value</span>);</span><br><span class="line">            <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;leftSigon(<span class="variable">$node</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$value</span> &lt; <span class="variable">$node</span>-&gt;value) &#123;</span><br><span class="line">            <span class="variable">$node</span>-&gt;left = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;left, <span class="variable">$value</span>);</span><br><span class="line">            <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right) - <span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left) == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;rightSigon(<span class="variable">$node</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$node</span>-&gt;left &amp;&amp; <span class="variable">$node</span>-&gt;right) &#123;</span><br><span class="line">                <span class="variable">$tmp</span> = <span class="keyword">$this</span>-&gt;findMin(<span class="variable">$node</span>-&gt;right);</span><br><span class="line">                <span class="variable">$node</span>-&gt;value = <span class="variable">$tmp</span>-&gt;value;</span><br><span class="line">                <span class="variable">$node</span>-&gt;right = <span class="keyword">$this</span>-&gt;delRecursion(<span class="variable">$node</span>-&gt;right, <span class="variable">$tmp</span>-&gt;value);</span><br><span class="line">                <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$node</span>-&gt;left || <span class="variable">$node</span>-&gt;right) &#123;</span><br><span class="line">                <span class="variable">$node</span> = <span class="variable">$node</span>-&gt;left ? <span class="variable">$node</span>-&gt;left : <span class="variable">$node</span>-&gt;right;</span><br><span class="line">                <span class="variable">$node</span>-&gt;height = max(<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;left),<span class="keyword">$this</span>-&gt;getHeight(<span class="variable">$node</span>-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$node</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$node</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node $node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findMin</span>(<span class="params">Node <span class="variable">$node</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$node</span>-&gt;left) &#123;</span><br><span class="line">            <span class="variable">$node</span> = <span class="variable">$node</span>-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$node</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$node</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">13</span>];</span><br><span class="line"><span class="comment">//$arr = [6,5,7,4];</span></span><br><span class="line"><span class="comment">//$arr = [6,5,7];</span></span><br><span class="line"><span class="comment">//$arr = [6,7];</span></span><br><span class="line"><span class="variable">$avl</span> = <span class="keyword">new</span> AvlTree();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$val</span> . <span class="string">&#x27;:::::&#x27;</span> . PHP_EOL;</span><br><span class="line">    <span class="variable">$node</span> = <span class="variable">$avl</span>-&gt;insert(<span class="variable">$val</span>, <span class="variable">$node</span>);</span><br><span class="line">   <span class="comment">// $avl-&gt;printTree($node);</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$node</span>-&gt;value . <span class="string">&#x27;:::::&#x27;</span> . PHP_EOL;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;*****************&quot;</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$avl</span>-&gt;printTree(<span class="variable">$node</span>);</span><br><span class="line"><span class="variable">$node</span> = <span class="variable">$avl</span>-&gt;delRecursion(<span class="variable">$node</span>,  <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line"><span class="variable">$avl</span>-&gt;printTree(<span class="variable">$node</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>explain</title>
    <url>/2021/04/20/explain/</url>
    <content><![CDATA[<p>explain关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈。<br>explain的执行的结果：<br><img src="/images/db/explain-show.jpg" alt="explain"></p>
<span id="more"></span>
<h3 id="explain包含的字段"><a href="#explain包含的字段" class="headerlink" title="explain包含的字段"></a>explain包含的字段</h3><ul>
<li><p>Id 对于select查询语句的标记序号，或者再有子查询时标识selelct子句或者操作表的顺序，数字越大越先执行。如果数字一样从上往下先执行。</p>
</li>
<li><p>Select_type 查询类型，表示语句执行的类型，如simple表示不包含union或者select子查询的简单select的查询。</p>
</li>
<li><p>table 查询的表名字</p>
</li>
<li><p>partitions 查询的分区</p>
</li>
<li><p>type 查询的类型，all,index,rang,ref,eq_ref,const,system,null等类型表示查询执行的优劣。 </p>
</li>
<li><p>possible_keys 可能使用的索引，但是不一定使用</p>
</li>
<li><p>key使用到的索引</p>
</li>
<li><p>key_len 使用的索引的长度</p>
</li>
<li><p>ref 如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p>
</li>
<li><p>rows 表示MySQL认为执行查询必须检查的行数</p>
</li>
<li><p>filtered 指示将被表条件过滤的表行的估计百分比。最大值为100，这表示未过滤行。值从100减小表示过滤量增加。 <code>rows</code>显示检查的估计行数，<code>rows</code>× <code>filtered</code>显示将与下表连接的行数。例如，如果 <code>rows</code>为1000且 <code>filtered</code>为50.00（50％），则与下表连接的行数为1000×50％= 500.需要和rows合并起来看，如最上边的多，使用常量数值进行查询，此值为100表示为过滤。</p>
</li>
<li><p>extra 有关MySQL如何解析查询的其他信息。如use index,等等。</p>
</li>
</ul>
<hr>
<h3 id="type-查询的连接类型"><a href="#type-查询的连接类型" class="headerlink" title="type 查询的连接类型"></a>type 查询的连接类型</h3><p>以下列表描述了连接类型，从最佳类型到最差类型：</p>
<ul>
<li><p>system 该表只有一行，这是const 链接类型的特例</p>
</li>
<li><p>const  常量查询，一般都是在唯一键，匹配到一行的因为只有一行，所以优化器的其余部分可以将这一行中列的值视为常量。 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_const"><code>const</code></a>表非常快，因为它们只能读取一次。</p>
</li>
<li><p>eq_ref 对于先前表中的每行组合，从此表中读取一行。除了 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_system"><code>system</code></a>和 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_const"><code>const</code></a>类型，这是最好的联接类型。当连接使用索引的所有部分且索引为<code>PRIMARY KEY</code>（主键）或<code>UNIQUE NOT NULL</code>index（唯一索引）时使用。在使用联表的时候其实也是两个使用都是主键或是唯一索引。</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_eq_ref"><code>eq_ref</code></a>可以用于使用<code>=</code>运算符进行比较的索引列 。比较值可以是常量，也可以是使用在此表之前读取的表中列的表达式。在以下示例中，MySQL可以使用 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_eq_ref"><code>eq_ref</code></a>联接进行处理 *<code>ref_table</code>*：</p>
<figure class="highlight plain"><figcaption><span>* FROM *ref_table*,*other_table*  WHERE *ref_table*.*key_column*</span></figcaption><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>Ref 与eq_ref的却别是使用不是唯一索引，有个一列或是常量值查询可能匹配到多个行数据.可用于使用<code>=</code>或<code>&lt;=&gt;</code> 运算符进行比较的索引列</p>
<figure class="highlight plain"><figcaption><span>* FROM *ref_table* WHERE *key_column*</span></figcaption><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>Fulltext 使用全文索引</p>
</li>
<li><p>Ref_or_null 连接类型类似于 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_ref"><code>ref</code></a>，但是除了MySQL还会额外搜索包含<code>NULL</code>值的行。此联接类型优化最常用于解析子查询。在以下示例中，MySQL可以使用 <a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_ref_or_null"><code>ref_or_null</code></a>联接进行处理*<code>ref_table</code>*：</p>
<figure class="highlight plain"><figcaption><span>* FROM *ref_table*  WHERE *key_column*</span></figcaption><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>Index_merge 表示使用了索引合并的优化方法。一般实在有索引的查询使用了or查询。</p>
<figure class="highlight plain"><figcaption><span>* FROM *tbl_name* WHERE *key1* </span></figcaption><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>unique_subquery 此类型替换 以下形式的<a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_eq_ref"><code>eq_ref</code></a>某些 <code>IN</code>子查询,子句查询的是主键或是唯一索引</p>
<figure class="highlight plain"><figcaption><span>IN (SELECT `primary_key` FROM *single_table* WHERE *some_expr*)</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* index_subquery 此类型和unique_subquery查询类型差不多，但是子句查询的是 不是唯一索引类型。它代替&#96;IN&#96;子查询，但适用于以下形式的子查询中的非唯一索引</span><br><span class="line"></span><br><span class="line">* range 使用索引选择行，仅检索给定范围内的行。的&#96;key&#96; 输出行中的列指示使用哪个索引。将&#96;key_len&#96;包含已使用的时间最长的关键部分。</span><br><span class="line"></span><br><span class="line">  [&#96;range&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;explain-output.html#jointype_range)当一个键列使用任何的相比于恒定可使用 [&#96;&#x3D;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_equal)， [&#96;&lt;&gt;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_not-equal)， [&#96;&gt;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_greater-than)， [&#96;&gt;&#x3D;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_greater-than-or-equal)， [&#96;&lt;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_less-than)， [&#96;&lt;&#x3D;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_less-than-or-equal)， [&#96;IS NULL&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_is-null)， [&#96;&lt;&#x3D;&gt;&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_equal-to)， [&#96;BETWEEN&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_between)， [&#96;LIKE&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;string-comparison-functions.html#operator_like)，或 [&#96;IN()&#96;](https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;comparison-operators.html#operator_in)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;SELECT * FROM *tbl_name*  WHERE *key_column* &#x3D; 10; SELECT * FROM *tbl_name*  WHERE *key_column* BETWEEN 10 and 20; SELECT * FROM *tbl_name*  WHERE *key_column* IN (10,20,30); SELECT * FROM *tbl_name*  WHERE *key_part1* &#x3D; 10 AND *key_part2* IN (10,20,30);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Index 类型是all的一种特例表示不是全扫描表数据，而是全部扫描索引树。因为索引文件通常比数据文件小，也就是虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘读的。发生在，查询是覆盖索引值如 select id from table.或者是在查询数据单数按照主键索引排序读取的时候。如：</p>
<p><img src="/images/db/explain-type-index-2.jpg" alt="index-2"></p>
</li>
</ul>
<p>如果不是order by type将是all</p>
<ul>
<li>All 表示全表扫描表示是最慢的查询。</li>
</ul>
<hr>
<p>select_type表示查询语句的类型。</p>
<ul>
<li><p>simple 一般都是单表查询。</p>
</li>
<li><p>primary 查询中若包含任何复杂的子部分，最外层查询则被标记为主查询.如 value in (select id from table1)语句</p>
</li>
<li><p>Subquery 子查询的意思，表示在where或是select中的子查询语句</p>
</li>
<li><p>union 表示使用union 的联表语句如：select * from t1 union select * from t2;</p>
</li>
<li><p>Derived 表示from的子查询语句需要递归的执行，</p>
</li>
</ul>
<hr>
<p>  Extra 查询的一些额外信息，可以提示是否使用的索引，排序是否使用到索引等等</p>
<ul>
<li><p>Use filesort 既是用不到索引的排序，需要额外排序，一般是order by的不是索引字段或者使用不上索引造成。<strong>filesort</strong> 使用的算法是QuickSort，即对需要排序的记录生成元数据进行分块排序，然后再使用mergesort方法合并块。其中filesort可以使用的<strong>内存空间</strong>大小为参数 sort_buffer_size 的值，默认为2M。当排序记录太多 <strong>sort_buffer_size</strong> 不够用时，mysql会使用<strong>临时文件来存放各个分块</strong>，然后各个分块排序后再多次合并分块最终全局完成排序</p>
</li>
<li><p>Use temporary用了临时表保存中间结果，MySQL在对结果排序时使用临时表，常见于排序order by 和分组查询group by 例子：</p>
</li>
<li><p>Use index 使用到索引.表示相应的select操作中使用了覆盖索引（Covering Index）,避免访问了表的数据行，效率不错！ 如果同时出现using where，表明索引被用来执行索引键值的查找 如果没有同时出现using where，表明索引用来读取数据而非执行查找动作</p>
</li>
<li><p>Use where 使用where条件</p>
</li>
<li><p>Impossible where where条件匹配不到值。</p>
</li>
<li><p>Using join buffer 使用连接缓存</p>
</li>
<li><p>distinct 一般是在链表时出现，一旦mysql匹配到联合行就不匹配了，链表的字段都是唯一索引。</p>
</li>
<li><p>select tables optimized away select操作已经优化到极致了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>heap堆</title>
    <url>/2019/08/07/heap%E5%A0%86/</url>
    <content><![CDATA[<h3 id="堆是解决优先级队列，topK问题的常见算法。"><a href="#堆是解决优先级队列，topK问题的常见算法。" class="headerlink" title="堆是解决优先级队列，topK问题的常见算法。"></a>堆是解决优先级队列，topK问题的常见算法。</h3><p>二叉堆的结构性质：堆是一个完全被填满的二叉树，一颗高位h的二叉树有 2^h到2^h+1 - 1个节点。</p>
<p>堆的性质：父节点的键值总是不大于它的孩子节点的键值（小顶堆）, 堆可以分为小顶堆和大顶堆。 以0开头的 数组中i处的左子节点为 2 * i + 1 右子节点在 2 * i + 2，子节点的父节点在 （i-1）/2处。具有有序性，但是不是说对插入的值是完全按照 单调的顺序排序的。<span id="more"></span></p>
<p><img src="/images/img/08-07/c5b78405-6523-4b41-af40-13448b431648.png"></p>
<p>可以看出看出位于数组下标三的左子节点和右子节点符合定义，在 2 * 3 + 1 = 7【数组下标】； 2 * 3 + 2 = 8【数组下标8】<!--more--></p>
<h3 id="插入的操作"><a href="#插入的操作" class="headerlink" title="插入的操作"></a>插入的操作</h3><p>先插入到数组最后一个坐标下，如果可以放在最后一个坐标【符合二叉堆的性质】大于父节点【小顶堆】。如果不符合需要朝着父节点的方向一步一步上移。</p>
<p>如上图插入14的过程.</p>
<p>1:插入底部</p>
<p><img src="/images/img/08-07/f41c8b2d-e2ed-4d18-a1ea-b9a0f28931a9.png"></p>
<p> 2:上移 14 与父节点互换值</p>
<p><img src="/images/img/08-07/fef77d6f-6a19-478a-8268-ea7f6f5a2883.png"></p>
<p>3:判断继续上移与父节点【21】互换值</p>
<p><img src="/images/img/08-07/d09b977c-8f72-4536-ab8f-e194698dead6.png"></p>
<p>到达条件退出上浮操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">&amp;<span class="variable">$arr</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable">$arr</span>[] = <span class="variable">$value</span>;</span><br><span class="line">      <span class="variable">$len</span>  = count(<span class="variable">$arr</span>) - <span class="number">1</span>;</span><br><span class="line">      <span class="variable">$i</span> = <span class="variable">$len</span>;</span><br><span class="line">      <span class="keyword">while</span>(<span class="variable">$i</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="variable">$j</span> = (<span class="variable">$i</span> - <span class="number">1</span>)/<span class="number">2</span>;<span class="comment">//找到父节点</span></span><br><span class="line">             <span class="keyword">if</span> (<span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$j</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$i</span>]) &#123;</span><br><span class="line">                     <span class="variable">$tmp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">                     <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">                     <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">                     <span class="variable">$i</span> = <span class="variable">$j</span>;<span class="comment">//往上上浮</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除其实和插入类似，把数组第一个节点数据取出作为返回数据，把数组最后一个元素取出用于比较，重新比较让结构符合二叉堆的性质。其实删除的是最后一个数组节点，其他数据通过比较运算一个放到合适的节点。</p>
<p>1:取出第一个数组的值 13 和最后一个值31</p>
<p><img src="/images/img/08-07/a0afaf79-7cd1-4918-9ccb-08683554ed02.png"></p>
<p>2:14 和 16比较 那个大小 决定往哪一个方向走，是往 14 左子树走，还是往16 的左子树走。用最后一个值【31】 与 当前走向的节点比较，如果最后一个值【31】如果大于当前节点继续往下进行。</p>
<p><img src="/images/img/08-07/cf29c3be-1f7d-44e0-a97e-903e66443c21.png"></p>
<p><img src="/images/img/08-07/98d16f4f-2cc1-44ab-a048-be8e7cc36694.png"></p>
<p><img src="/images/img/08-07/9640dfdc-cc2d-40b3-a3a1-347824df31c9.png"></p>
<p><img src="/images/img/08-07/bf50d17f-e654-40b2-a687-9da633fae3a1.png"></p>
<p>代码实现：上图那些空的其实还保留着原来的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">&amp;<span class="variable">$arr</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$midValue</span> = <span class="variable">$arr</span>[<span class="number">0</span>]; <span class="comment">//取得第一个元素</span></span><br><span class="line">    <span class="variable">$len</span> = count(<span class="variable">$arr</span>) - <span class="number">1</span>;<span class="comment">//取得数组的长度</span></span><br><span class="line">    <span class="variable">$lastVal</span>  = <span class="variable">$arr</span>[<span class="variable">$len</span>];<span class="comment">//取得最后一个值</span></span><br><span class="line">    <span class="variable">$j</span> = <span class="number">0</span>;<span class="comment">//从头开始</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * <span class="variable">$j</span> &lt;= <span class="variable">$i</span>) &#123;<span class="comment">//防止节点超出数组长度</span></span><br><span class="line">           <span class="variable">$left</span>    =  <span class="number">2</span> * <span class="variable">$j</span> + <span class="number">1</span>;<span class="comment">//左子节点</span></span><br><span class="line">           <span class="variable">$right</span>  =  <span class="number">2</span> * <span class="variable">$j</span> + <span class="number">2</span>;<span class="comment">//右子节点</span></span><br><span class="line">           <span class="variable">$t</span> = <span class="variable">$left</span>;<span class="comment">//走向，初始往左边走</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$right</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$right</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$left</span>]) &#123;<span class="comment">//决定往左子树走，还是右子树走</span></span><br><span class="line">                <span class="variable">$t</span> = <span class="variable">$right</span>; <span class="comment">//往右边走</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$lastVal</span> &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>]) &#123;</span><br><span class="line">                 <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$t</span>];<span class="comment">//把子节点上浮，继续往下走</span></span><br><span class="line">                 <span class="variable">$j</span> = <span class="variable">$t</span>;<span class="comment">//下次比较的数组下标</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$lastVal</span>;<span class="comment">//重新放入最后一个节点，如上图的操作 最后 $j 的坐标值 是 10 但是下边的删除语句删除它了，保证此二叉堆还是一个满二叉堆且符合二叉堆性质</span></span><br><span class="line">    <span class="variable">$unset</span>[<span class="variable">$arr</span>[<span class="variable">$len</span>]];<span class="comment">//删除最后一个元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;<span class="comment">//返回数组</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全部代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: lhs</span></span><br><span class="line"><span class="comment"> * Date: 2019-06-18</span></span><br><span class="line"><span class="comment"> * Time: 10:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class heap</span></span><br><span class="line"><span class="comment"> * 二叉堆【优先级队列】</span></span><br><span class="line"><span class="comment"> * 二叉堆的定义是：父节点的键值总是不大于它的孩子节点的键值（小顶堆）, 堆可以分为小顶堆和大顶堆。</span></span><br><span class="line"><span class="comment"> *     在数组中i处的左子节点为 2 * i + 1 右子节点在 2 * i + 2，子节点的父节点在 （i-1）/2处</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">heap</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$heapArr</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$heapSize</span> = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $testArr</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"><span class="variable">$testArr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params"><span class="variable">$val</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;heapSize++;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;heapArr[<span class="keyword">$this</span>-&gt;heapSize] = <span class="variable">$val</span>;</span><br><span class="line">        <span class="variable">$i</span>                              = (count(<span class="keyword">$this</span>-&gt;heapArr) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable">$j</span> = (<span class="variable">$i</span> - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$j</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$i</span>] &lt; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>]) &#123;</span><br><span class="line">                <span class="variable">$tmp</span>               = <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$i</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$i</span>] = <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>];</span><br><span class="line">                <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>] = <span class="variable">$tmp</span>;</span><br><span class="line">                <span class="variable">$i</span>                 = <span class="variable">$j</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$i</span>       = (count(<span class="keyword">$this</span>-&gt;heapArr) - <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$minVal</span>  = <span class="keyword">$this</span>-&gt;heapArr[<span class="number">0</span>];</span><br><span class="line">        <span class="variable">$lastVal</span> = <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$j</span>       = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * <span class="variable">$j</span> &lt;= <span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="variable">$left</span>  = <span class="number">2</span> * <span class="variable">$j</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$right</span> = <span class="number">2</span> * <span class="variable">$j</span> + <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$t</span>     = <span class="variable">$left</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$left</span>] &amp;&amp; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$right</span>] &amp;&amp; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$right</span>] &lt; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$left</span>]) &#123;</span><br><span class="line">                <span class="variable">$t</span> = <span class="variable">$right</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$lastVal</span> &gt; <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>]) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>] = <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$t</span>];</span><br><span class="line">                <span class="variable">$j</span>                 = <span class="variable">$t</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$j</span>] = <span class="variable">$lastVal</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;heapArr[<span class="variable">$i</span>]);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;heapSize--;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$minVal</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//构建二叉堆</span></span><br><span class="line">        <span class="variable">$length</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = (<span class="variable">$length</span> - <span class="number">2</span>) / <span class="number">2</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="keyword">$this</span>-&gt;down(<span class="variable">$arr</span>, <span class="variable">$i</span>, <span class="variable">$length</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        var_dump(<span class="variable">$arr</span>);</span><br><span class="line">        <span class="comment">//进行堆排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="variable">$length</span> - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="number">1</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="comment">//把堆顶的元素与最后一个元素交换</span></span><br><span class="line">            <span class="variable">$temp</span>    = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="variable">$arr</span>[<span class="number">0</span>]  = <span class="variable">$temp</span>;</span><br><span class="line">            <span class="comment">//下沉调整</span></span><br><span class="line">            <span class="variable">$arr</span> = <span class="keyword">$this</span>-&gt;down(<span class="variable">$arr</span>, <span class="number">0</span>, <span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $parent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $length</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$arr</span>, <span class="keyword">int</span> <span class="variable">$parent</span>, <span class="keyword">int</span> <span class="variable">$length</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//临时保证要下沉的元素</span></span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$parent</span>];</span><br><span class="line">        <span class="comment">//定位左孩子节点位置</span></span><br><span class="line">        <span class="variable">$child</span> = <span class="number">2</span> * <span class="variable">$parent</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//开始下沉</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$child</span> &lt; <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="comment">//如果右孩子节点比左孩子小，则定位到右孩子</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$child</span> + <span class="number">1</span> &lt; <span class="variable">$length</span> &amp;&amp; <span class="variable">$arr</span>[<span class="variable">$child</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$child</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="variable">$child</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果父节点比孩子节点小或等于，则下沉结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$temp</span> &lt;= <span class="variable">$arr</span>[<span class="variable">$child</span>]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//单向赋值</span></span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$parent</span>] = <span class="variable">$arr</span>[<span class="variable">$child</span>];</span><br><span class="line">            <span class="variable">$parent</span>       = <span class="variable">$child</span>;</span><br><span class="line">            <span class="variable">$child</span>        = <span class="number">2</span> * <span class="variable">$parent</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$parent</span>] = <span class="variable">$temp</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$testArr</span> = [</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">21</span>,</span><br><span class="line">    <span class="number">19</span>,</span><br><span class="line">    <span class="number">68</span>,</span><br><span class="line">    <span class="number">26</span>,</span><br><span class="line">    <span class="number">65</span>,</span><br><span class="line">    <span class="number">19</span>,</span><br><span class="line">    <span class="number">14</span>,</span><br><span class="line">    <span class="number">13</span>,</span><br><span class="line">    <span class="number">16</span>,</span><br><span class="line">    <span class="number">32</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$heap</span> = <span class="keyword">new</span> heap();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*foreach ($testArr as $val) &#123;</span></span><br><span class="line"><span class="comment">    $heap-&gt;insert($val);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var_dump($heap-&gt;heapArr);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$heap</span>-&gt;getTree(<span class="variable">$array</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">//var_dump($heap-&gt;heapArr);</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>java线程</title>
    <url>/2021/04/20/java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>一个进程是一个独立的程序运行单位：包括了内存，编译好的二进制代码，寄存器，堆践等等。</p>
<p>线程是最小的逻辑执行单元，只有在运行的时候才会有自身的寄存器等等。</p>
<p>一个进程可以多个线程。</p>
<ul>
<li>由于线程共享公共变量，所以对于公共变量的更改要加锁以便防止并发改，或者一个线程执行到一半，又有另外的线程更改。造成数据不一致。<span id="more"></span></li>
</ul>
<p>Java线程的创建或是执行方式：</p>
<p>1:使用lambda方式实现及实现Runnable接口</p>
<pre><code>                      <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r = ()-&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> toAccount = (<span class="keyword">int</span>) (bank.size() * Math.random());</span><br><span class="line">            <span class="keyword">double</span> amount = balance * Math.random();</span><br><span class="line">            System.out.print(formAccount);</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            System.out.print(toAccount);</span><br><span class="line">            System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            System.out.print(amount);</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            bank.tranfer(formAccount, toAccount, amount);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception $e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure>
</code></pre>
<p>​             </p>
<p>2:继承并实现thread的run方法</p>
<p>二：线程的状态</p>
<p>​      new（新建）</p>
<p>​      runnable（可运行）</p>
<p>​      blocked（阻塞）</p>
<p>​      waiting（等待）</p>
<p>​       timed waiting (计时等待)</p>
<p>​       terminated（被终止）</p>
<p>三：线程之间的锁机制</p>
<p>​       3.1使用Lock和Condition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] accounts;</span><br><span class="line">    <span class="keyword">private</span> Lock bankLock;</span><br><span class="line">    <span class="keyword">private</span> Condition sufficientFunds;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs the bank.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n the number of accounts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialBalance the initial balance for each account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">double</span> initialBalance)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">        Arrays.fill(accounts, initialBalance);</span><br><span class="line">        bankLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        sufficientFunds = bankLock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transfers money from one account to another.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from the account to transfer from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to the account to transfer to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount the amount to transfer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tranfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bankLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (accounts[from] &lt; amount)</span><br><span class="line">                sufficientFunds.await();</span><br><span class="line">            accounts[from] -= amount;</span><br><span class="line">            System.out.print(Thread.currentThread()) ;</span><br><span class="line">            System.out.printf(<span class="string">&quot; %10.2f from %d to %d&quot;</span>, amount, from, to);</span><br><span class="line">            accounts[to] += amount;</span><br><span class="line">            System.out.printf(<span class="string">&quot; Total Balance: %10.2f%n&quot;</span>, getTotalBalance());</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            sufficientFunds.signalAll();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bankLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bankLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">double</span> item : accounts) &#123;</span><br><span class="line">                sum += item;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bankLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​                                 </p>
<p>3.2使用synchronized</p>
<p> synchronized关键字类似于lock用来锁定代码执行区域。</p>
<p>​       public synchronized void methodName()</p>
<p> {</p>
<p>​       local;</p>
<p>​              …method</p>
<p>​        unlock;</p>
<p>}</p>
<pre><code>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] accounts;</span><br><span class="line">    <span class="comment">//private Lock bankLock;</span></span><br><span class="line">    <span class="comment">//private Condition sufficientFunds;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs the bank.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n the number of accounts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialBalance the initial balance for each account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">double</span> initialBalance)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">        Arrays.fill(accounts, initialBalance);</span><br><span class="line">        <span class="comment">//bankLock = new ReentrantLock();</span></span><br><span class="line">        <span class="comment">//sufficientFunds = bankLock.newCondition();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transfers money from one account to another.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from the account to transfer from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to the account to transfer to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount the amount to transfer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">tranfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (accounts[from] &lt; amount)</span><br><span class="line">                wait();</span><br><span class="line">            accounts[from] -= amount;</span><br><span class="line">            System.out.print(Thread.currentThread()) ;</span><br><span class="line">            System.out.printf(<span class="string">&quot; %10.2f from %d to %d&quot;</span>, amount, from, to);</span><br><span class="line">            accounts[to] += amount;</span><br><span class="line">            System.out.printf(<span class="string">&quot; Total Balance: %10.2f%n&quot;</span>, getTotalBalance());</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public void tranfer(int from, int to, double amount) throws InterruptedException</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        bankLock.lock();</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            while (accounts[from] &lt; amount)</span></span><br><span class="line"><span class="comment">//                sufficientFunds.await();</span></span><br><span class="line"><span class="comment">//            accounts[from] -= amount;</span></span><br><span class="line"><span class="comment">//            System.out.print(Thread.currentThread()) ;</span></span><br><span class="line"><span class="comment">//            System.out.printf(&quot; %10.2f from %d to %d&quot;, amount, from, to);</span></span><br><span class="line"><span class="comment">//            accounts[to] += amount;</span></span><br><span class="line"><span class="comment">//            System.out.printf(&quot; Total Balance: %10.2f%n&quot;, getTotalBalance());</span></span><br><span class="line"><span class="comment">//            System.out.print(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//            sufficientFunds.signalAll();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//            bankLock.unlock();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//bankLock.lock();</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">double</span> item : accounts) &#123;</span><br><span class="line">                sum += item;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// bankLock.unlock();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>四：线程安全的集合</p>
<p>五：线程池</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql锁</title>
    <url>/2021/04/20/mysql%E9%94%81/</url>
    <content><![CDATA[<p>锁的作用<br>​     锁是为了控制对共享资源的并发访问和操作。数据库系统使用锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性。<br>两种锁的概念：</p>
<ul>
<li><p>Latch:闩锁，这是一种轻量级锁，用于线程中的临界资源的操作【例如，操作缓冲池中的LRU列表，删除、添加、移动LRU列表中的元素，为了保证一致性，必须有锁的介入】。锁定的时间非常短，而且没有死锁检测机制。</p>
</li>
<li><p>lock:用于数据事务的锁，并且在一般在commit和rollback后释放。有死锁检测机制。</p>
<span id="more"></span>
<p>锁的类型<br>​       表锁：myisam 锁<br>​       共享锁：允许事物读取一行数据【S锁】<br>​       排它锁：允许事物更新或是删除一条数据【X锁】<br>myIsam对于并发操作处理方式:<br>​    MySQL对于删除和插入的处理，对于删除操作，myisam只是标记这行被删除，并没有真正的去作删除处理。在插入的时候回看看有没有标记的删除的行【成为空洞】，如果有会填补这些空洞，没有会插入到行末尾。<br>   尽管myisam是表锁，但是也指出并发的读，并发插入的操作，读只能读取到当前的数据，新插入的数据是看不见的，这避免了非一致读问题。但是中间有些数据改动的话还是不支持非一致读。<br>   通过设置concurrent_insert这个人值，可以改变myisam的插入并发的控制。</p>
<ul>
<li><p>0：MySQL不支持并发插入，所有插入都会设置互斥锁。</p>
</li>
<li><p>1：默认值，如果没有空洞就指出并发插入。</p>
</li>
<li><p>2：所有的并发插入都设置在表尾部。</p>
</li>
</ul>
</li>
</ul>
<p>Innodb:</p>
<ul>
<li>共享锁【S锁】<br>对于共享锁，支持对于一行加了S锁，可以在加s锁，但是不支持加X锁。</li>
<li>排它锁【X锁】<br>对于排它锁，加了排它锁的行，不支持在加任何其他锁</li>
</ul>
<p>​    </p>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>php数组的实现</title>
    <url>/2020/04/20/php%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>PHP 数组的底层实现是散列表（也叫 hashTable )，散列表是根据键（Key）直接访问内存存储位置的数据结构，它的 key - value 之间存在一个映射函数，可以根据 key 通过映射函数得到的散列值直接索引到对应的 value 值，无需通过关键字比较，在理想情况下，不考虑散列冲突，散列表的查找效率是非常高的，时间复杂度是 O (1)。<span id="more"></span></p>
<p>我们先了解几个基础概念.</p>
<p>​        散列：是一种用常数平均时间执行查找，删除，添加的技术。通常是把输入的字符换算成一个固定数字或是字符串返回。也就是同一个字符串无论输入几次计算散列（hash）值，在条件不变的情况，都是同一个输出值。</p>
<p>一个常见的散列函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hash(<span class="keyword">char</span> *str,<span class="keyword">int</span> tableSize)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hashVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        hashVal = (hashVal &lt;&lt; <span class="number">5</span>) + *str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashVal % tableSize</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* time33算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> time33(<span class="keyword">char</span> *str)&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">5381</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        hash += (hash &lt;&lt; <span class="number">5</span> ) + (*str++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (hash &amp; <span class="number">0x7FFFFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PHP7 数组hash值得算法</span></span><br><span class="line"><span class="comment"> * DJBX33A (Daniel J. Bernstein, Times 33 with Addition)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is Daniel J. Bernstein&#x27;s popular `times 33&#x27; hash function as</span></span><br><span class="line"><span class="comment"> * posted by him years ago on comp.lang.c. It basically uses a function</span></span><br><span class="line"><span class="comment"> * like ``hash(i) = hash(i-1) * 33 + str[i]&#x27;&#x27;. This is one of the best</span></span><br><span class="line"><span class="comment"> * known hash functions for strings. Because it is both computed very</span></span><br><span class="line"><span class="comment"> * fast and distributes very well.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The magic of number 33, i.e. why it works better than many other</span></span><br><span class="line"><span class="comment"> * constants, prime or not, has never been adequately explained by</span></span><br><span class="line"><span class="comment"> * anyone. So I try an explanation: if one experimentally tests all</span></span><br><span class="line"><span class="comment"> * multipliers between 1 and 256 (as RSE did now) one detects that even</span></span><br><span class="line"><span class="comment"> * numbers are not useable at all. The remaining 128 odd numbers</span></span><br><span class="line"><span class="comment"> * (except for the number 1) work more or less all equally well. They</span></span><br><span class="line"><span class="comment"> * all distribute in an acceptable way and this way fill a hash table</span></span><br><span class="line"><span class="comment"> * with an average percent of approx. 86%.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If one compares the Chi^2 values of the variants, the number 33 not</span></span><br><span class="line"><span class="comment"> * even has the best value. But the number 33 and a few other equally</span></span><br><span class="line"><span class="comment"> * good numbers like 17, 31, 63, 127 and 129 have nevertheless a great</span></span><br><span class="line"><span class="comment"> * advantage to the remaining numbers in the large set of possible</span></span><br><span class="line"><span class="comment"> * multipliers: their multiply operation can be replaced by a faster</span></span><br><span class="line"><span class="comment"> * operation based on just one shift plus either a single addition</span></span><br><span class="line"><span class="comment"> * or subtraction operation. And because a hash function has to both</span></span><br><span class="line"><span class="comment"> * distribute good _and_ has to be very fast to compute, those few</span></span><br><span class="line"><span class="comment"> * numbers should be preferred and seems to be the reason why Daniel J.</span></span><br><span class="line"><span class="comment"> * Bernstein also preferred it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *                  -- Ralf S. Engelschall &lt;rse@engelschall.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline zend_ulong <span class="title">zend_inline_hash_func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_ulong hash = Z_UL(<span class="number">5381</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* variant with the hash unrolled eight times */</span></span><br><span class="line">    <span class="keyword">for</span> (; len &gt;= <span class="number">8</span>; len -= <span class="number">8</span>) &#123;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (len) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="comment">/* fallthrough... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + *str++; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">break</span>;</span><br><span class="line">EMPTY_SWITCH_DEFAULT_CASE()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Hash value can&#x27;t be zero, so we always set the high bit */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SIZEOF_ZEND_LONG == 8</span></span><br><span class="line">    <span class="keyword">return</span> hash | Z_UL(<span class="number">0x8000000000000000</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> SIZEOF_ZEND_LONG == 4</span></span><br><span class="line">    <span class="keyword">return</span> hash | Z_UL(<span class="number">0x80000000</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">error</span> <span class="meta-string">&quot;Unknown SIZEOF_ZEND_LONG&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​          </p>
<p>2：虽然散列能实现快速的定位到元素在数组中的位置，但是不同的字符串通过散列计算有可能会得到同一个散列值。这叫做hash冲突，常见的解决hash冲突的是拉链法，或者叫做列表法，也是在同一个数组的位置上存储了一个链表。这也是PHP的解决方法。</p>
<p>3：PHP5的数组实现：</p>
<p>​      查找关键字时，PHP将计算哈希值，然后遍历“可能”值的链接列表，直到找到匹配的条目。</p>
<p>这是链接冲突解决的说明：</p>
<p>​    <img src="/images/youdao/6207.png" alt="0"></p>
<p>此外，PHP哈希表是<em>有序的</em>：如果遍历数组，您将以插入元素的顺序获得元素。为此，存储桶必须是另一个指定顺序的链表的一部分。由于与上述相同的原因（并且支持反向顺序遍历），这再次是一个双链表。前向指针存储在中pListNext，后向指针存储在中pListLast。另外，哈希表结构具有指向列表开头（pListHead）和列表结尾（）的指针pListLast。下面是这个链表可能看起来怎么样的元素的例子”a”，”b”，”c”（按顺序）：</p>
<p>​    <img src="/images/youdao/6211.png" alt="0"></p>
<p>4：php7数组的实现：</p>
<p>​    PHP7对数组底层实现进行了优化，使得元素的插入顺序和数据的存储顺序保存了一致。</p>
<p>1：下图对PHP数组结构做了接单的梳理</p>
<p>​    <img src="/images/youdao/6222.png" alt="0"></p>
<p>2：PHP有序性的实现方式</p>
<p>为了实现 PHP 数组的有序性，PHP 底层的散列表在散列函数与元素数组之间加了一层映射表，这个映射表也是一个数组，大小和存储元素的数组相同，存储元素的类型为整型，用于保存元素在实际存储的有序数组中的下标 —— 元素按照先后顺序依次插入实际存储数组，然后将其数组下标按照散列函数散列出来的位置存储在新加的映射表中：</p>
<p>​    <img src="/images/youdao/6231.png" alt="0"></p>
<p>这样，就可以完成最终存储数据的有序性了。</p>
<p>PHP 数组底层结构中并没有显式标识这个中间映射表，而是与 arData 放到了一起，在数组初始化的时候并不仅仅分配用于存储 Bucket 的内存，还会分配相同数量的 uint32_t 大小的空间，这两块空间是一起分配的，然后将 arData 偏移到存储元素数组的位置，而这个中间映射表就可以通过 arData 向前访问到。</p>
<p>3：介绍下各个数据结构</p>
<p>HashTable 位于 Zend/zend_types.h</p>
<pre><code>            <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span><br><span class="line">    zend_refcounted_h gc;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ZEND_ENDIAN_LOHI_4(</span><br><span class="line">                zend_uchar    flags,</span><br><span class="line">                zend_uchar    nApplyCount,</span><br><span class="line">                zend_uchar    nIteratorsCount,</span><br><span class="line">                zend_uchar    consistency)</span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    &#125; u;</span><br><span class="line">    <span class="comment">/* 非常有用 计算出来的hash值与此 进行 | 操作【h | ht-&gt;nTableMask】，计算出来存储映射表数组的下标位置。  */</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableMask;</span><br><span class="line">    <span class="comment">/* 实际存储 数组元素的 指针开始地址*/</span></span><br><span class="line">    Bucket           *arData;</span><br><span class="line">    <span class="comment">/* 已使用数组数量，包括标记删除的，利用这个数字实现数组的有序插入*/</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumUsed;</span><br><span class="line">    <span class="comment">/* 实际有效元素数量 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumOfElements;</span><br><span class="line">    <span class="comment">/* 已申请的数组的总大小 */</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableSize;</span><br><span class="line">    <span class="keyword">uint32_t</span>          nInternalPointer;</span><br><span class="line">    zend_long         nNextFreeElement;</span><br><span class="line">    <span class="keyword">dtor_func_t</span>       pDestructor;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* Bucket：C数组实际存储的值位于 Zend/zend_types.h*/</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Bucket</span> &#123;</span></span><br><span class="line">    <span class="comment">/* zval_struct 结构体 */</span></span><br><span class="line">    zval              val;</span><br><span class="line">    <span class="comment">/* hash值 */</span></span><br><span class="line">    zend_ulong        h;                <span class="comment">/* hash value (or numeric index)   */</span></span><br><span class="line">    <span class="comment">/* 字符串元素值，出现hash冲突时候，用来精确确认 是不是所查找的元素*/</span></span><br><span class="line">    zend_string      *key;              <span class="comment">/* string key or NULL for numerics */</span></span><br><span class="line">&#125; Bucket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*zval_struct：  Bucket的zval所指向的结构体  位于 Zend/zend_types.h</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 实际值*/</span></span><br><span class="line">    zend_value        value;            <span class="comment">/* value */</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ZEND_ENDIAN_LOHI_4(</span><br><span class="line">                zend_uchar    type,         <span class="comment">/* active type */</span></span><br><span class="line">                zend_uchar    type_flags,</span><br><span class="line">                zend_uchar    const_flags,</span><br><span class="line">                zend_uchar    reserved)     <span class="comment">/* call info for EX(This) */</span></span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="keyword">uint32_t</span> type_info;</span><br><span class="line">    &#125; u1;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="comment">/*重点 这个字段存储了，hash冲突时，他的上一个冲突的元素的数组的下标值*/</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     access_flags;         <span class="comment">/* class constant access flags */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line">        <span class="keyword">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">    &#125; u2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>​              </p>
<p>4:PHP 数组的操作</p>
<p>添加操作： Zend/zend_hash.c ：797行左右</p>
<pre><code>           <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_to_hash:</span><br><span class="line">    <span class="comment">/* 已使用元素++*/</span></span><br><span class="line">    idx = ht-&gt;nNumUsed++;</span><br><span class="line">    <span class="comment">/* 有效元素++*/</span></span><br><span class="line">    ht-&gt;nNumOfElements++;</span><br><span class="line">    <span class="keyword">if</span> (ht-&gt;nInternalPointer == HT_INVALID_IDX) &#123;</span><br><span class="line">        ht-&gt;nInternalPointer = idx;</span><br><span class="line">    &#125;</span><br><span class="line">    zend_hash_iterators_update(ht, HT_INVALID_IDX, idx);</span><br><span class="line">    <span class="keyword">if</span> ((zend_long)h &gt;= (zend_long)ht-&gt;nNextFreeElement) &#123;</span><br><span class="line">        ht-&gt;nNextFreeElement = h &lt; ZEND_LONG_MAX ? h + <span class="number">1</span> : ZEND_LONG_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 获取存储数组的下标地址，并且赋值*/</span></span><br><span class="line">    p = ht-&gt;arData + idx;</span><br><span class="line">    p-&gt;h = h;</span><br><span class="line">    p-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/*计算出 与映射数组的下标值*/</span></span><br><span class="line">    nIndex = h | ht-&gt;nTableMask;</span><br><span class="line">    ZVAL_COPY_VALUE(&amp;p-&gt;val, pData);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *PHP 数组底层的散列表采用链地址法解决哈希冲突，即将冲突的 Bucket 串成链表</span></span><br><span class="line"><span class="comment">    *下边的宏函数有四部操作</span></span><br><span class="line"><span class="comment">    * Z_NEXT(p-&gt;val) 主要是获取 zval.u2.next所指向的地址</span></span><br><span class="line"><span class="comment">    * HT_HASH(ht, nIndex) 是获取中间映射表里所存储的值，然后通过赋值语句赋值给zval.u2.next所指向的地址，用于解决hash冲突，串成链表。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把最新数组下标值，存储于中间映射表中</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    HT_HASH(ht, nIndex) = HT_IDX_TO_HASH(idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;p-&gt;val;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>删除数据</p>
<p>​        关于数组数据删除前面我们在介绍散列表中的 nNumUsed 和 nNumOfElements 字段时已经提及过，从数组中删除元素时，并没有真正移除，并重新 rehash，而是当 arData 满了之后，才会移除无用的数据，从而提高性能。即数组在需要扩容的情况下才会真正删除元素：首先检查数组中已删除元素所占比例，如果比例达到阈值则触发重新构建索引的操作，这个过程会把已删除的 Bucket 移除，然后把后面的 Bucket 往前移动补上空位，如果还没有达到阈值则会分配一个原数组大小 2 倍的新数组，然后把原数组的元素复制到新数组上，最后重建索引，重建索引会将已删除的 Bucket 移除。</p>
<p>数组查找</p>
<p>​        清楚了 HashTable 的实现和哈希冲突的解决方式之后，查找的过程就比较简单了：首先根据 key 计算出的散列值与 nTableMask 计算得到最终散列值 nIndex，然后根据散列值从中间映射表中得到存储元素在有序存储数组中的位置 idx，接着根据 idx 从有序存储数组（即 arData）中取出 Bucket，遍历该 Bucket，判断 Bucket 的 key 是否是要查找的 key，如果是则终止遍历，否则继续根据 zval.u2.next 遍历比较。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>skiplist</title>
    <url>/2021/04/20/skiplist/</url>
    <content><![CDATA[<p>跳跃表：是基于链表来是实现的。</p>
<p>我们可以先看看单链表的数据的结构。如下图<br><img src="/images/img/08-02/534d222a-d592-4a3b-8033-fd9d8aed0e3e.png"><br>在这样一个链表中，如果我们要查找某个数据，那么需要从头开始逐个进行比较，直到找到包含数据的那个节点，或者找到第一个比给定数据大的节点为止（没找到）。也就是说，时间复杂度为O(n)。同样，当我们要插入新数据的时候，也要经历同样的查找过程，从而确定插入位置。假如我们每相邻两个节点增加一个指针，让指针指向下下个节点，如下图：<span id="more"></span><br><img src="/images/img/08-02/debfa0a1-b863-4757-8f34-494bc3629183.png"><br>这样所有新增加的指针连成了一个新的链表，但它包含的节点个数只有原来的一半（上图中是7, 19, 26）。现在当我们想查找数据的时候，可以先沿着这个新链表进行查找。当碰到比待查数据大的节点时，再回到原来的链表中进行查找。比如，我们想查找23，查找的路径是沿着下图中标红的指针所指向的方向进行的：<br><img src="/images/img/08-02/28d09f18-8d83-4f20-ae8a-5a4fef012308.png"><br>23首先和7比较，再和19比较，比它们都大，继续向后比较。<br>但23和26比较的时候，比26要小，因此回到下面的链表（原链表），与22比较。<br>23比22要大，沿下面的指针继续向后和26比较。23比26小，说明待查数据23在原链表中不存在，而且它的插入位置应该在22和26之间。<br>在这个查找过程中，由于新增加的指针，我们不再需要与链表中每个节点逐个进行比较了。需要比较的节点数大概只有原来的一半。</p>
<p>skiplist正是受这种多层链表的想法的启发而设计出来的。实际上，按照上面生成链表的方式，上面每一层链表的节点个数，是下面一层的节点个数的一半，这样查找过程就非常类似于一个二分查找，使得查找的时间复杂度可以降低到O(log n)。但是，这种方法在插入数据的时候有很大的问题。新插入一个节点之后，就会打乱上下相邻两层链表上节点个数严格的2:1的对应关系。如果要维持这种对应关系，就必须把新插入的节点后面的所有节点（也包括新插入的节点）重新进行调整，这会让时间复杂度重新蜕化成O(n)。删除数据也有同样的问题。</p>
<p>skiplist为了避免这一问题，它不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是为每个节点随机出一个层数(level)。比如，一个节点随机出的层数是3，那么就把它链入到第1层到第3层这三层链表中。为了表达清楚，下图展示了如何通过一步步的插入操作从而形成一个skiplist的过程：<br><img src="/images/img/08-02/5c861dec-955e-4c80-8cdf-79ca212e78cb.png"><br>从上面skiplist的创建和插入过程可以看出，每一个节点的层数（level）是随机出来的，而且新插入一个节点不会影响其它节点的层数。因此，插入操作只需要修改插入节点前后的指针，而不需要对很多节点都进行调整。这就降低了插入操作的复杂度。实际上，这是skiplist的一个很重要的特性，这让它在插入性能上明显优于平衡树的方案。这在后面我们还会提到。</p>
<p>根据上图中的skiplist结构，我们很容易理解这种数据结构的名字的由来。skiplist，翻译成中文，可以翻译成“跳表”或“跳跃表”，指的就是除了最下面第1层链表之外，它会产生若干层稀疏的链表，这些链表里面的指针故意跳过了一些节点（而且越高层的链表跳过的节点越多）。这就使得我们在查找数据的时候能够先在高层的链表中进行查找，然后逐层降低，最终降到第1层链表来精确地确定数据位置。在这个过程中，我们跳过了一些节点，从而也就加快了查找速度。</p>
<p>下面是使用PHP实现的跳跃表的一个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳跃表</span></span><br><span class="line"><span class="comment"> * Head nodes          Index nodes</span></span><br><span class="line"><span class="comment"> * +-+    right        +-+                      +-+</span></span><br><span class="line"><span class="comment"> * |2|----------------&gt;| |---------------------&gt;| |-&gt;null</span></span><br><span class="line"><span class="comment"> * +-+                 +-+                      +-+</span></span><br><span class="line"><span class="comment"> *  | down              |                        |</span></span><br><span class="line"><span class="comment"> *  v                   v                        v</span></span><br><span class="line"><span class="comment"> * +-+            +-+  +-+       +-+            +-+       +-+</span></span><br><span class="line"><span class="comment"> * |1|-----------&gt;| |-&gt;| |------&gt;| |-----------&gt;| |------&gt;| |-&gt;null</span></span><br><span class="line"><span class="comment"> * +-+            +-+  +-+       +-+            +-+       +-+</span></span><br><span class="line"><span class="comment"> *  v              |    |         |              |         |</span></span><br><span class="line"><span class="comment"> * Nodes  next     v    v         v              v         v</span></span><br><span class="line"><span class="comment"> * +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+</span></span><br><span class="line"><span class="comment"> * | |-&gt;|A|-&gt;|B|-&gt;|C|-&gt;|D|-&gt;|E|-&gt;|F|-&gt;|G|-&gt;|H|-&gt;|I|-&gt;|J|-&gt;|K|-&gt;null</span></span><br><span class="line"><span class="comment"> * +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nextNode</span>; <span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 索引值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$score</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;score = <span class="variable">$score</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params"><span class="variable">$val</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = <span class="variable">$val</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexNode</span> <span class="keyword">extends</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> IndexNode|Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$downNode</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int 当前的层数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">// public $level = 0;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳跃表层高</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$level</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最高层头结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> IndexNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$head</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">CONST</span> SKIPLIST_P = <span class="number">0.5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大层数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> MAX_LEVEL  = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SkipList constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;head = <span class="keyword">new</span> IndexNode(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。</span></span><br><span class="line"><span class="comment">     * 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。</span></span><br><span class="line"><span class="comment">     *该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：</span></span><br><span class="line"><span class="comment">     *50%的概率返回 1</span></span><br><span class="line"><span class="comment">     *25%的概率返回 2</span></span><br><span class="line"><span class="comment">     *12.5%的概率返回 3 ...</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">randomLevel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$level</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lcg_value() &lt; <span class="built_in">self</span>::SKIPLIST_P &amp;&amp; <span class="variable">$level</span> &lt; <span class="built_in">self</span>::MAX_LEVEL) &#123;</span><br><span class="line">            <span class="variable">$level</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$level</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findEntry</span>(<span class="params"><span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Node|IndexNode $list</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Node|IndexNode $list</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$list</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$list</span>-&gt;nextNode &amp;&amp; <span class="variable">$list</span>-&gt;nextNode-&gt;score &lt; <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$list</span> = <span class="variable">$list</span>-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$list</span>-&gt;downNode) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$list</span>-&gt;downNode)) &#123;</span><br><span class="line">                <span class="variable">$list</span> = <span class="variable">$list</span>-&gt;downNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findEntry2</span>(<span class="params"><span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> Node|IndexNode $list</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$list</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$list</span>-&gt;nextNode &amp;&amp; <span class="variable">$list</span>-&gt;nextNode-&gt;score &lt; <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$list</span> = <span class="variable">$list</span>-&gt;nextNode;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;::&#x27;</span>.<span class="variable">$list</span>-&gt;score.<span class="string">&#x27;::&#x27;</span>.PHP_EOL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$list</span>-&gt;downNode) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$list</span>-&gt;downNode)) &#123;</span><br><span class="line">                <span class="variable">$list</span> = <span class="variable">$list</span>-&gt;downNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$list</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Node|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;findEntry(<span class="variable">$score</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$node</span>-&gt;nextNode &amp;&amp; <span class="variable">$node</span>-&gt;nextNode-&gt;score == <span class="variable">$score</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$node</span>-&gt;nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addNode</span>(<span class="params"><span class="variable">$score</span>,<span class="variable">$val</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$node</span> = <span class="keyword">new</span> Node(<span class="variable">$score</span>);</span><br><span class="line">        <span class="variable">$node</span>-&gt;setData(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$entryNode</span> = <span class="keyword">$this</span>-&gt;findEntry(<span class="variable">$score</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$entryNode</span> &amp;&amp; <span class="variable">$entryNode</span>-&gt;score == <span class="variable">$score</span> &amp;&amp; <span class="variable">$entryNode</span>-&gt;data == <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$node</span>-&gt;nextNode      = <span class="variable">$entryNode</span>-&gt;nextNode;</span><br><span class="line">        <span class="variable">$entryNode</span>-&gt;nextNode = <span class="variable">$node</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$head</span> = <span class="variable">$down</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@var</span> IndexNode|Node $newIndex</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$newIndex</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//因为不是双向链接指定，所以要在当前层，往下一层一层添加 索引节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="keyword">$this</span>-&gt;level; <span class="variable">$i</span>&gt;=<span class="number">1</span>;<span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$down</span>-&gt;nextNode &amp;&amp; <span class="variable">$down</span>-&gt;nextNode-&gt;score &lt; <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$down</span> = <span class="variable">$down</span>-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$down</span>-&gt;nextNode &amp;&amp; <span class="variable">$down</span>-&gt;nextNode-&gt;score == <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$newIndex</span>) &#123;</span><br><span class="line">                    <span class="variable">$newIndex</span>-&gt;downNode = <span class="variable">$down</span>-&gt;nextNode;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$upNewIndex</span> = <span class="variable">$newIndex</span> ? <span class="variable">$newIndex</span> : <span class="literal">null</span>;</span><br><span class="line">                <span class="variable">$newIndex</span> = <span class="keyword">new</span> IndexNode(<span class="variable">$score</span>);</span><br><span class="line">                <span class="variable">$newIndex</span>-&gt;nextNode = <span class="variable">$down</span>-&gt;nextNode;</span><br><span class="line">                <span class="variable">$down</span>-&gt;nextNode = <span class="variable">$newIndex</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$upNewIndex</span>) &#123;</span><br><span class="line">                    <span class="variable">$upNewIndex</span>-&gt;downNode = <span class="variable">$newIndex</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$down</span> = <span class="variable">$head</span>-&gt;downNode;</span><br><span class="line">            <span class="variable">$head</span> = <span class="variable">$head</span>-&gt;downNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$level</span> = <span class="keyword">$this</span>-&gt;randomLevel();</span><br><span class="line">        <span class="comment">//因为层数大于当前层，所以要在当前层，往上一层一层添加 索引节点，并建立索引节点的上下关系</span></span><br><span class="line">        <span class="variable">$up</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="keyword">$this</span>-&gt;level+<span class="number">1</span>;<span class="variable">$i</span>&lt;= <span class="variable">$level</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$downUp</span>       = <span class="variable">$up</span> ?? <span class="literal">null</span>;</span><br><span class="line">            <span class="variable">$up</span>           = <span class="keyword">new</span> IndexNode(<span class="literal">null</span>);</span><br><span class="line">            <span class="variable">$newIndex</span>     = <span class="keyword">new</span> IndexNode(<span class="variable">$score</span>);</span><br><span class="line">            <span class="variable">$up</span>-&gt;nextNode = <span class="variable">$newIndex</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$downUp</span>) &#123;</span><br><span class="line">                <span class="variable">$up</span>-&gt;downNode = <span class="variable">$downUp</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$downUp</span>-&gt;nextNode &amp;&amp; <span class="variable">$downUp</span>-&gt;nextNode-&gt;score &lt; <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$downUp</span> = <span class="variable">$downUp</span>-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$down</span>-&gt;nextNode-&gt;score == <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$newIndex</span>-&gt;downNode = <span class="variable">$down</span>-&gt;nextNode;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;head = <span class="variable">$up</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;level = <span class="keyword">$this</span>-&gt;level &lt; <span class="variable">$level</span> ? <span class="variable">$level</span>:<span class="keyword">$this</span>-&gt;level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印跳跃表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prinSkipList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$down</span> = <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$down</span>) &#123;</span><br><span class="line">            <span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$node</span>) &#123;</span><br><span class="line">                <span class="variable">$str</span> .= <span class="string">&#x27;[&#x27;</span>.<span class="variable">$node</span>-&gt;score.<span class="string">&#x27;][&#x27;</span>.(<span class="keyword">isset</span>(<span class="variable">$node</span>-&gt;downNode) ? <span class="variable">$node</span>-&gt;downNode-&gt;score : <span class="literal">null</span>).<span class="string">&#x27;][&#x27;</span>.(<span class="keyword">isset</span>(<span class="variable">$node</span>-&gt;nextNode) ? <span class="variable">$node</span>-&gt;nextNode-&gt;score : <span class="literal">null</span>).<span class="string">&#x27;]--&#x27;</span>;</span><br><span class="line">                <span class="variable">$node</span> = <span class="variable">$node</span>-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$str</span>.PHP_EOL;</span><br><span class="line">            <span class="variable">$down</span> = <span class="variable">$node</span> = <span class="variable">$down</span>-&gt;downNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"><span class="variable">$score</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$node</span> = <span class="keyword">$this</span>-&gt;get(<span class="variable">$score</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$node</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$head</span> = <span class="variable">$down</span> = <span class="keyword">$this</span>-&gt;head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="keyword">$this</span>-&gt;level;<span class="variable">$i</span>&gt;=<span class="number">1</span>;<span class="variable">$i</span>--) &#123;</span><br><span class="line">            <span class="variable">$nodeNum</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$levelNode</span> = <span class="variable">$down</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$down</span>-&gt;nextNode &amp;&amp; <span class="variable">$down</span>-&gt;nextNode-&gt;score &lt; <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$nodeNum</span>++;</span><br><span class="line">                <span class="variable">$down</span> = <span class="variable">$down</span>-&gt;nextNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$down</span>-&gt;nextNode &amp;&amp; <span class="variable">$down</span>-&gt;nextNode-&gt;score == <span class="variable">$score</span>) &#123;</span><br><span class="line">                <span class="variable">$down</span>-&gt;nextNode = <span class="variable">$down</span>-&gt;nextNode-&gt;nextNode;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$nodeNum</span> &lt;= <span class="number">2</span> &amp;&amp; !<span class="variable">$down</span>-&gt;nextNode) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;level = <span class="keyword">$this</span>-&gt;level &gt; <span class="number">1</span> ? (<span class="keyword">$this</span>-&gt;level - <span class="number">1</span>) : <span class="keyword">$this</span>-&gt;level;</span><br><span class="line">                    <span class="variable">$head</span> = <span class="variable">$head</span>-&gt;downNode ? <span class="variable">$head</span>-&gt;downNode : <span class="variable">$head</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$down</span> = <span class="variable">$levelNode</span>-&gt;downNode ? <span class="variable">$levelNode</span>-&gt;downNode : <span class="variable">$levelNode</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;head = <span class="variable">$head</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$skipList</span> = <span class="keyword">new</span> SkipList();</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">8</span>,<span class="string">&#x27;8&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">6</span>,<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">7</span>,<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">2</span>,<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">0</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;prinSkipList();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;-------------------------&quot;</span>.PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Test 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">$skipList</span> = <span class="keyword">new</span> SkipList();</span><br><span class="line"><span class="variable">$head2</span> = <span class="keyword">new</span> IndexNode(<span class="literal">null</span>);</span><br><span class="line"><span class="variable">$head1</span> = <span class="keyword">new</span> IndexNode(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$head2</span>-&gt;downNode = <span class="variable">$head1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$data1</span> = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$data1</span>-&gt;setData(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable">$index1</span> = <span class="keyword">new</span> IndexNode(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$index1</span>-&gt;downNode = <span class="variable">$data1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$index2</span> = <span class="keyword">new</span> IndexNode(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$data2</span> = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$data2</span>-&gt;setData(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$index2</span>-&gt;downNode = <span class="variable">$data2</span>;</span><br><span class="line"><span class="variable">$index1</span>-&gt;nextNode = <span class="variable">$index2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data1</span>-&gt;nextNode = <span class="variable">$data2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$data3</span> = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line"><span class="variable">$data3</span>-&gt;setData(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="variable">$data2</span>-&gt;nextNode = <span class="variable">$data3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data4</span> = <span class="keyword">new</span> Node(<span class="number">4</span>);</span><br><span class="line"><span class="variable">$data4</span>-&gt;setData(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="variable">$data3</span>-&gt;nextNode = <span class="variable">$data4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$head1</span>-&gt;nextNode = <span class="variable">$data1</span>;</span><br><span class="line"><span class="variable">$head2</span>-&gt;nextNode = <span class="variable">$index1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$head3</span> = <span class="keyword">new</span> IndexNode(<span class="literal">null</span>);</span><br><span class="line"><span class="variable">$head3</span>-&gt;downNode = <span class="variable">$head2</span>;</span><br><span class="line"><span class="variable">$head3</span>-&gt;nextNode = <span class="keyword">new</span> IndexNode(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$head3</span>-&gt;nextNode-&gt;downNode = <span class="variable">$index1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$skipList</span>-&gt;head  = <span class="variable">$head3</span>;</span><br><span class="line"><span class="variable">$skipList</span>-&gt;level = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$skipList</span>-&gt;prinSkipList();</span><br><span class="line"><span class="variable">$skipList</span>-&gt;del(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;-------------------------&quot;</span>.PHP_EOL;</span><br><span class="line"><span class="variable">$skipList</span>-&gt;prinSkipList();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;-------------------------&quot;</span>.PHP_EOL;</span><br><span class="line"><span class="variable">$skipList</span>-&gt;addNode(<span class="number">6</span>,<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"><span class="variable">$skipList</span>-&gt;prinSkipList();</span><br><span class="line"><span class="comment">//$node = $skipList-&gt;get(7);</span></span><br><span class="line"><span class="comment">//var_dump($node-&gt;score);</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>snowflake-雪花算法</title>
    <url>/2020/05/24/snowflake-%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Snowflake 算法介绍<br>Snowflake 是由 Twitter 提出的一个分布式全局唯一 ID 生成算法，算法生成 ID 的结果是一个 64bit 大小的长整，标准算法下它的结构如下图：<br><img src="/images/img/08-02/2718f82d-82fe-4d68-9a4a-e3e2afc1020b.png"><br>1 位，不用。<br>   二进制中最高位为符号位，我们生成的 ID 一般都是正整数，所以这个最高位固定是 0。<br>41 位，用来记录时间戳（毫秒）。<br>   41 位 可以表示 2^41 - 1 个数字。<br>   也就是说 41 位 可以表示 2^41 - 1 个毫秒的值，转化成单位年则是 (2^41 - 1) / (1000 * 60 * 60 * 24 * 365) 约为 69 年。<br>10 位，用来记录工作机器 ID。<br>   可以部署在 2^10 共 1024 个节点，包括 5 位 DatacenterId 和 5 位 WorkerId。<br>12 位，序列号，用来记录同毫秒内产生的不同 id。<br>  12 位 可以表示的最大正整数是 2^12 - 1 共 4095 个数字，来表示同一机器同一时间截（毫秒)内产生的 4095 个 ID 序号。<br>Snowflake 可以保证：<br>      所有生成的 ID 按时间趋势递增。<br>      整个分布式系统内不会产生重复 ID（因为有 DatacenterId (5 bits) 和 WorkerId (5 bits) 来做区分）。</p>
<span id="more"></span>
<p>算法的PHP实现：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class IdWorker snowflake算法生成unique id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> Snowflake</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snowflake</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//开始时间</span></span><br><span class="line">    <span class="keyword">const</span> EPOCH_OFFSET = <span class="number">1293811200000</span>;</span><br><span class="line">    <span class="comment">//首位</span></span><br><span class="line">    <span class="keyword">const</span> SIGN_BITS = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//时间戳相减占用的位数</span></span><br><span class="line">    <span class="keyword">const</span> TIMESTAMP_BITS = <span class="number">41</span>;</span><br><span class="line">    <span class="comment">//数据中心位数</span></span><br><span class="line">    <span class="keyword">const</span> DATA_CENTER_BITS = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//机器位数</span></span><br><span class="line">    <span class="keyword">const</span> MACHINE_ID_BITS = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//同一毫秒内自增的位数</span></span><br><span class="line">    <span class="keyword">const</span> SEQUENCE_BITS = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dataCenterId</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$machineId</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> null|int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$lastTimestamp</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sequence</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标志位需要位移的长度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$signLeftShift</span> = <span class="built_in">self</span>::TIMESTAMP_BITS + <span class="built_in">self</span>::DATA_CENTER_BITS + <span class="built_in">self</span>::MACHINE_ID_BITS + <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">//时间差值需要位移的长度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$timestampLeftShift</span> = <span class="built_in">self</span>::DATA_CENTER_BITS + <span class="built_in">self</span>::MACHINE_ID_BITS + <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">//数据中心需要位移的长度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dataCenterLeftShift</span> = <span class="built_in">self</span>::MACHINE_ID_BITS + <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">//机器需要位移的长度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$machineLeftShift</span> = <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">    <span class="comment">//最大自增数</span></span><br><span class="line">    <span class="comment">//下边语法执行效果 等于 (1 &lt;&lt; 12) - 1;</span></span><br><span class="line">    <span class="comment">//-1 &lt;&lt; self::SEQUENCE_BITS = 1111111111111111111111111111111111111111111111111111000000000000</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$maxSequenceId</span>   = ~ (-<span class="number">1</span> &lt;&lt; <span class="built_in">self</span>::SEQUENCE_BITS);</span><br><span class="line">    <span class="comment">//最大机器数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$maxMachineId</span>    = ~ (-<span class="number">1</span> &lt;&lt; <span class="built_in">self</span>::MACHINE_ID_BITS);</span><br><span class="line">    <span class="comment">//最大数据中心机器数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$maxDataCenterId</span> = ~ (-<span class="number">1</span> &lt;&lt; <span class="built_in">self</span>::DATA_CENTER_BITS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IdWorker constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $dataCenter_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $machine_id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dataCenter_id</span>, <span class="variable">$machine_id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$dataCenter_id</span> &gt; <span class="keyword">$this</span>-&gt;maxDataCenterId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;data center id should between 0 and &#x27;</span> . <span class="keyword">$this</span>-&gt;maxDataCenterId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$machine_id</span> &gt; <span class="keyword">$this</span>-&gt;maxMachineId) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;machine id should between 0 and &#x27;</span> . <span class="keyword">$this</span>-&gt;maxMachineId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dataCenterId = <span class="variable">$dataCenter_id</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;machineId = <span class="variable">$machine_id</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">id</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$sign</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$timestamp</span> = <span class="keyword">$this</span>-&gt;getUnixTimestamp();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$timestamp</span> &lt; <span class="keyword">$this</span>-&gt;lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;Clock moved backwards!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;lastTimestamp == <span class="variable">$timestamp</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sequence++;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;sequence &gt; <span class="keyword">$this</span>-&gt;maxSequenceId) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sequence = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lastTimestamp = <span class="variable">$timestamp</span>;</span><br><span class="line">        <span class="comment">//算出时间差值</span></span><br><span class="line">        <span class="variable">$time</span> = (<span class="keyword">int</span>)(<span class="variable">$timestamp</span> - <span class="built_in">self</span>::EPOCH_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//($sign &lt;&lt; $this-&gt;signLeftShift) =》  1 左移 63 位 : 1000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">        <span class="comment">//($time &lt;&lt; $this-&gt;timestampLeftShift) 时间左移 22 位</span></span><br><span class="line">        <span class="comment">// ($this-&gt;dataCenterId &lt;&lt; $this-&gt;dataCenterLeftShift) 数据中心 左移 17位</span></span><br><span class="line">        <span class="comment">// ($this-&gt;machineId &lt;&lt; $this-&gt;machineLeftShift) 机器中心左移 12 位</span></span><br><span class="line">        <span class="variable">$id</span> = (<span class="variable">$sign</span> &lt;&lt; <span class="keyword">$this</span>-&gt;signLeftShift) | (<span class="variable">$time</span> &lt;&lt; <span class="keyword">$this</span>-&gt;timestampLeftShift) | (<span class="keyword">$this</span>-&gt;dataCenterId &lt;&lt; <span class="keyword">$this</span>-&gt;dataCenterLeftShift) | (<span class="keyword">$this</span>-&gt;machineId &lt;&lt; <span class="keyword">$this</span>-&gt;machineLeftShift) | <span class="keyword">$this</span>-&gt;sequence;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">string</span>)<span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析自增ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//转化为二进制字符串</span></span><br><span class="line">        <span class="variable">$binUuid</span> = decbin(<span class="variable">$id</span>);</span><br><span class="line">        <span class="variable">$len</span> = strlen(<span class="variable">$binUuid</span>);</span><br><span class="line">        <span class="variable">$sequenceStart</span> = <span class="variable">$len</span> - <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">        <span class="comment">//截取自增的二进制字符串</span></span><br><span class="line">        <span class="variable">$sequence</span> = substr(<span class="variable">$binUuid</span>, <span class="variable">$sequenceStart</span>, <span class="built_in">self</span>::SEQUENCE_BITS);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$machineIdStart</span> = <span class="variable">$len</span> - <span class="built_in">self</span>::MACHINE_ID_BITS - <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">        <span class="variable">$machineId</span> = substr(<span class="variable">$binUuid</span>, <span class="variable">$machineIdStart</span>, <span class="built_in">self</span>::MACHINE_ID_BITS);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dataCenterIdStart</span> = <span class="variable">$len</span> - <span class="built_in">self</span>::DATA_CENTER_BITS - <span class="built_in">self</span>::MACHINE_ID_BITS - <span class="built_in">self</span>::SEQUENCE_BITS;</span><br><span class="line">        <span class="variable">$dataCenterId</span> = substr(<span class="variable">$binUuid</span>, <span class="variable">$dataCenterIdStart</span>, <span class="built_in">self</span>::DATA_CENTER_BITS);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$timestamp</span> = substr(<span class="variable">$binUuid</span>, <span class="number">0</span>, <span class="variable">$dataCenterIdStart</span>);</span><br><span class="line">        <span class="variable">$realTimestamp</span> = bindec(<span class="variable">$timestamp</span>) + <span class="built_in">self</span>::EPOCH_OFFSET;</span><br><span class="line">        <span class="variable">$timestamp</span> = substr(<span class="variable">$realTimestamp</span>, <span class="number">0</span>, -<span class="number">3</span>);</span><br><span class="line">        <span class="variable">$microSecond</span> = substr(<span class="variable">$realTimestamp</span>, -<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span> =&gt; date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>, <span class="variable">$timestamp</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$microSecond</span>,</span><br><span class="line">            <span class="string">&#x27;dataCenterId&#x27;</span> =&gt; bindec(<span class="variable">$dataCenterId</span>),</span><br><span class="line">            <span class="string">&#x27;machineId&#x27;</span> =&gt; bindec(<span class="variable">$machineId</span>),</span><br><span class="line">            <span class="string">&#x27;sequence&#x27;</span> =&gt; bindec(<span class="variable">$sequence</span>),</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getUnixTimestamp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floor(microtime(<span class="literal">true</span>) * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>事务及事务隔离性</title>
    <url>/2021/04/20/%E4%BA%8B%E5%8A%A1%E5%8F%8A%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E6%80%A7/</url>
    <content><![CDATA[<p>事务的几个概念：</p>
<p>​    A（atomicity）原子性</p>
<p>​        是指，一个事务里的多条SQL命令要么全部执行，要么全部不执行。</p>
<p>   C（consistency）一致性</p>
<p>​         数据更改状态：及如果数据更新成功，要和预期值一致，如果失败要保持到更新之前的状态不变。</p>
<p>   I (isolation) 隔离性</p>
<p>​        事务的隔离性要求每个读写事务的对象对其他事务的操作对象能相互分离，即该事务提交前对其他事务都不可见，通常这使用锁来实现</p>
<p>   D(isolation)持久性</p>
<span id="more"></span>
<p>​        事务一旦提交，其结果就是永久性的。即使发生宕机等故障，数据库也能将数据恢复。需要注意的是，只能从事务本身的角度来保证结果的永久性。例如，在事务提交后，所有的变化都是永久的。即使当数据库因为崩溃而需要恢复时，也能保证恢复后提交的数据都不会丢失。但若不是数据库本身发生故障，而是一些外部的原因，如RAID卡损坏、自然灾害等原因导致数据库发生问题，那么所有提交的数据可能都会丢失。因此持久性保证事务系统的高可靠性（High Reliability），而不是高可用性（High Availability）。对于高可用性的实现，事务本身并不能保证，需要一些系统共同配合来完成。<!--more--></p>
<p>伴随事务产生的几个概念：（通过锁定机制可以实现事务的隔离性要求，使得事务可以并发地工作。锁也带来问题。）</p>
<p>​    脏读：是指一个事务读取到了另外一个事务未提交的数据【也称为脏数据】则显然违反了数据库的隔离性。</p>
<p>   幻读：在同一事务下，连续执行两次同样的SQL语句可能导致不同的结果，第二次的SQL语句可能会返回之前不存在的行。既是，一个事务读取到另外一个事务提交的数据。导致记录数不一致，这种问题在read-commited提交读下会产生，在MySQL的REPEATABLE READ下一般不会产生，InnoDB存储引擎采用Next-Key Locking的算法避免Phantom Problem。对于上述的SQL语句SELECT*FROM t WHERE a＞2 FOR UPDATE，其锁住的不是5这单个值，而是对（2，+∞）这个范围加了X锁。因此任何对于这个范围的插入都是不被允许